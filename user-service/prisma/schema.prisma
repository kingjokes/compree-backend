// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//users table
model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  fullname       String
  phone          String
  password       String?
  city           String?
  state          String?
  status         Int         @default(0) //0-> not verified 1->verified
  email_verified Int         @default(0) //0-> not verified 1->verified
  phone_verified Int         @default(0) //0-> not verified 1->verified
  otp            OTP?
  wallet         Float      @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  Business       Business?
  TeamMember     TeamMember?
}

//otp generation table
model OTP {
  id        Int      @id @default(autoincrement())
  otp       String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  status    Int      @default(0) //0-> not used,  1->used 2->expired
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//user business table
model Business {
  id       Int      @id @default(autoincrement())
  name     String?
  address  String?
  role     String?
  user     User     @relation(fields: [userId], references: [id])
  userId   Int      @unique
  branches Branch[]
  status   Int      @default(0) //0-> not verified 1->verified

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// business branches tab;e
model Branch {
  id            Int          @id @default(autoincrement())
  name          String
  address       String
  category      String
  manager       String
  manager_phone String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Business      Business?    @relation(fields: [businessId], references: [id])
  businessId    Int?
  document      String?
  TeamMember    TeamMember[]
}

//branch team members table. N.B a team member is also a user on the platform
model TeamMember {
  id        Int      @id @default(autoincrement())
  role      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  branch    Branch   @relation(fields: [branchId], references: [id])
  branchId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
